OOPS (Object-Oriented Programming System) in Java is a programming paradigm that uses objects and classes to structure software programs. The main principles of OOPS are:

ACCESS MODIFIERS:

public: The `public` keyword is an access modifier used for classes, methods, and variables. When a member is declared public, it means it can be accessed from any other class.

static: The `static` keyword is used for methods and variables. When a member is declared static, it means it belongs to the class, rather than instances of the class. 
   Static members can be accessed without creating an instance (object) of the class.

   class Main{   //class
    public static void sound(){  //method
        System.out.println("Animal makes sound");
    }
    public static void main(String args[]){
        
       sound(); // since it's a static declared, no instance is created to call the sound method
    }
    }

private: The `private` keyword is an access modifier used for methods and variables. When a member is declared private, it means it can only be accessed within the class it is declared.

protected: The `protected` keyword is an access modifier used for methods and variables. When a member is declared protected, it means it can be accessed within the same package and by subclasses.


// Example code demonstrating public, static, private, and protected access modifiers in Java

public class Example {
    // Public variable: accessible from any other class
    public int publicVar = 10;

    // Private variable: accessible only within this class
    private int privateVar = 20;

    // Protected variable: accessible within the same package and subclasses
    protected int protectedVar = 30;

    // Default (package-private) variable: accessible within the same package
    int defaultVar = 40;

    // Static variable: belongs to the class, not instances of the class
    static int staticVar = 50;

    // Public method: accessible from any other class
    public void publicMethod() {
        System.out.println("Public method");
    }

    // Private method: accessible only within this class
    private void privateMethod() {
        System.out.println("Private method");
    }

    // Protected method: accessible within the same package and subclasses
    protected void protectedMethod() {
        System.out.println("Protected method");
    }

    // Default (package-private) method: accessible within the same package
    void defaultMethod() {
        System.out.println("Default method");
    }

    // Static method: belongs to the class, not instances of the class
    static void staticMethod() {
        System.out.println("Static method");
    }

    public static void main(String[] args) {
        Example example = new Example();

        // Accessing public variable and method
        System.out.println(example.publicVar);
        example.publicMethod();

        // Accessing private variable and method (within the same class)
        System.out.println(example.privateVar);
        example.privateMethod();

        // Accessing protected variable and method
        System.out.println(example.protectedVar);
        example.protectedMethod();

        // Accessing default (package-private) variable and method
        System.out.println(example.defaultVar);
        example.defaultMethod();

        // Accessing static variable and method
        System.out.println(Example.staticVar);
        Example.staticMethod();
    }
}

OOPS HEADING:

1. Encapsulation: Bundling the data (variables) and methods (functions) that operate on the data into a single unit called a class. It also restricts direct access to some of the object's components, which is a means of preventing unintended interference and misuse of the data.
    Note: one class to be data field defined and other is the data value defines.

2. Inheritance: A mechanism where one class can inherit the properties and methods of another class. This promotes code reusability and establishes a natural hierarchy between classes.
    Types of Inheritance in Java:

    1. Single Inheritance: A class inherits from one superclass. This is supported in Java.
        
        class Parent {
             void display() {
                  System.out.println("Parent class method");
             }
        }
        class Child extends Parent {
             public static void main(String[] args) {
                  Child obj = new Child();
                  obj.display();
            }
        }

    2. Multilevel Inheritance: A class inherits from a superclass, and another class inherits from that subclass. This is supported in Java.
        
        class Grandparent {
             void display() {
                  System.out.println("Grandparent class method");
             }
        }

        class Parent extends Grandparent {}

        class Child extends Parent {
             public static void main(String[] args) {
                  Child obj = new Child();
                  obj.display();
            }
        }

    3. Hierarchical Inheritance: Multiple classes inherit from one superclass. This is supported in Java.
        class Parent {
             void display() {
                  System.out.println("Parent class method");
             }
        }

        class Child1 extends Parent {}

        class Child2 extends Parent {
             public static void main(String[] args) {
                  Child1 obj1 = new Child1();
                  obj1.display();

                  Child2 obj2 = new Child2();
                  obj2.display();
             }
        }

    4. Multiple Inheritance: A class inherits from more than one superclass. This is not supported in Java directly due to the diamond problem, but it can be achieved using interfaces.
        interface Parent1 {
             void display1();
        }

        interface Parent2 {
             void display2();
        }

        class Child implements Parent1, Parent2 {
             public void display1() {
                  System.out.println("Parent1 interface method");
             }

             public void display2() {
                  System.out.println("Parent2 interface method");
             }

             public static void main(String[] args) {
                  Child obj = new Child();
                  obj.display1();
                  obj.display2();
             }
        }

    5. Hybrid Inheritance: A combination of two or more types of inheritance. This is not supported in Java directly but can be achieved using interfaces.

3. Polymorphism : The ability of different classes to be treated as instances of the same class through a common interface. It allows one interface to be used for a general class of actions, making it easier to add new functionalities.
   Types: Method Overloading & Method Overriding

4. Abstraction: The concept of hiding the complex implementation details and showing only the necessary features of an object. It helps in reducing programming complexity and effort.

5. Class: It's the blueprint from which individual objects are created. It defines the properties and behaviors (methods) that the objects created from the class will have.

6. Object: It's an instance of a class. It has state (attributes) and behavior (methods) defined by the class.

7. Method: A function defined within a class that performs some action or operation. Methods are used to define the behavior of objects.

8. constructors: Constructors are special methods in Java that are used to initialize objects.
 They are called when an instance of a class is created. Constructors have the same name as the class and do not have a return type. 
 
 There are two types of constructors in Java:

1. Default Constructor: A constructor that does not take any arguments. If no constructor is defined in a class, the Java compiler automatically provides a default constructor.

2. Parameterized Constructor: A constructor that takes one or more arguments to initialize the object with specific values.

Here is an example demonstrating both types of constructors:

class Person {
    private String name;
    private int age;

    // Default constructor
    public Person() {
        this.name = "Unknown";
        this.age = 0;
    }

    // Parameterized constructor
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public void displayInfo() {
        System.out.println("Name: " + name + ", Age: " + age);
    }

    public static void main(String[] args) {
        // Creating an object using the default constructor
        Person person1 = new Person();
        person1.displayInfo(); // Output: Name: Unknown, Age: 0

        // Creating an object using the parameterized constructor
        Person person2 = new Person("John", 25);
        person2.displayInfo(); // Output: Name: John, Age: 25
    }
}

Java supports OOPS concepts through its syntax and standard libraries, making it a powerful language for building modular, reusable, and maintainable software.


Demo Example:

class Animal{
    public void sound(){
        system.out.println("Animal makes sound");
    }
    public static void main(String args[]){
        Animal obj = new Animal();
        obj.sound();
    }
}

Explain with example in the code sections:

In Java, the this keyword is used to refer to the current instance of the class. 

It is commonly used in constructors and methods to differentiate between instance variables and parameters with the same name. 
Here is an example based on your provided code:

class Animal {
    private String name;

    // Constructor with a parameter
    public Animal(String name) {
        this.name = name; // 'this' differentiates the instance variable from the parameter
    }

    public void setName(String name) {
        this.name = name; // 'this' differentiates the instance variable from the parameter
    }

    public void printName() {
        System.out.println("Animal's name: " + this.name); // 'this' refers to the current instance
    }

    public void callPrintName() {
        this.printName(); // 'this' is optional here, but it refers to the current instance
    }

    public static void main(String[] args) {
        Animal obj = new Animal("Lion");
        obj.printName(); // Output: Animal's name: Lion
        obj.setName("Tiger");
        obj.callPrintName(); // Output: Animal's name: Tiger
    }
}
