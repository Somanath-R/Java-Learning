In Java, an array is a container object that holds a fixed number of values of a single type. The length of an array is established when the array is created. After creation, its length is fixed. Here is an example of how to define and initialize an array in Java:

// Define an array of integers
int[] numbers = new int[5]; // This creates an array of integers with 5 elements

// Initialize the array
numbers[0] = 10;
numbers[1] = 20;
numbers[2] = 30;
numbers[3] = 40;
numbers[4] = 50;

// Alternatively, you can define and initialize the array in one line
int[] numbers = {10, 20, 30, 40, 50};

// Accessing elements of the array
System.out.println(numbers[0]); // Output: 10
System.out.println(numbers[1]); // Output: 20


For Each loopings is used in array.

int arr[]={33,3,4,5};  
for(int i:arr)  System.out.println(i);  

Passing the array to a method example.
Here the array is passed as a argument to another method

static void printarray(int[] ar){
    for (int i: arr){
        system.out.println(i)
    }
}

int[] arr={1,2,3,4,5};
printarray(arr)

Few Other Array types includes:

Multidimensional Array -> 2D,3D
Matrix Array


// String :
In Java, a string is a sequence of characters. 
Strings are objects in Java, which means they have methods that can perform operations on them. 
Here is an example of how to define and initialize a string in Java:

// Define a string
String greeting = "Hello, World!";

// Accessing characters in the string
char firstChar = greeting.charAt(0); // Output: 'H'

// String concatenation
String fullName = "John" + " " + "Doe"; // Output: "John Doe"

// String length
int length = greeting.length(); // Output: 13

// String comparison
boolean isEqual = "Hello".equals("hello"); // Output: false

// String methods
String upperCaseGreeting = greeting.toUpperCase(); // Output: "HELLO, WORLD!"
String lowerCaseGreeting = greeting.toLowerCase(); // Output: "hello, world!"
String substring = greeting.substring(0, 5); // Output: "Hello"


// Here are some commonly used string methods available in Java:
// Check if the string is empty
boolean isEmpty = greeting.isEmpty(); // Output: false

// Trim whitespace from the beginning and end of the string
String trimmedString = greeting.trim(); // Output: "Hello, World!"

// Replace characters in the string
String replacedString = greeting.replace('o', 'a'); // Output: "Hella, Warld!"

// Split the string into an array of substrings
String[] parts = greeting.split(", "); // Output: ["Hello", "World!"]

// Check if the string contains a sequence of characters
boolean containsHello = greeting.contains("Hello"); // Output: true

// Check if the string starts with a specific prefix
boolean startsWithHello = greeting.startsWith("Hello"); // Output: true

// Check if the string ends with a specific suffix
boolean endsWithWorld = greeting.endsWith("World!"); // Output: true

// Convert the string to a character array
char[] charArray = greeting.toCharArray(); // Output: ['H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!']

// Format a string
String formattedString = String.format("My name is %s and I am %d years old.", "John", 25); // Output: "My name is John and I am 25 years old."

// Join multiple strings
String joinedString = String.join(", ", "apple", "banana", "cherry"); // Output: "apple, banana, cherry"

// Convert other data types to string
String intString = String.valueOf(123); // Output: "123"
String booleanString = String.valueOf(true); // Output: "true"
String charString = String.valueOf('A'); // Output: "A"



