In Java, an array is a container object that holds a fixed number of values of a single type. The length of an array is established when the array is created. After creation, its length is fixed. Here is an example of how to define and initialize an array in Java:

// Define an array of integers
int[] numbers = new int[5]; // This creates an array of integers with 5 elements

// Initialize the array
numbers[0] = 10;
numbers[1] = 20;
numbers[2] = 30;
numbers[3] = 40;
numbers[4] = 50;

// Alternatively, you can define and initialize the array in one line
int[] numbers = {10, 20, 30, 40, 50};

// Accessing elements of the array
System.out.println(numbers[0]); // Output: 10
System.out.println(numbers[1]); // Output: 20


For Each loopings is used in array.

int arr[]={33,3,4,5};  
for(int i:arr)  System.out.println(i);  

Passing the array to a method example.
Here the array is passed as a argument to another method

static void printarray(int[] ar){
    for (int i: arr){
        system.out.println(i)
    }
}

int[] arr={1,2,3,4,5};
printarray(arr)

Few Other Array types includes:

Multidimensional Array -> 2D,3D
Matrix Array


// String :
In Java, a string is a sequence of characters. 
Strings are objects in Java, which means they have methods that can perform operations on them. 
Here is an example of how to define and initialize a string in Java:

// Define a string
String greeting = "Hello, World!";

// Accessing characters in the string
char firstChar = greeting.charAt(0); // Output: 'H'

// String concatenation
String fullName = "John" + " " + "Doe"; // Output: "John Doe"

// String length
int length = greeting.length(); // Output: 13

// String comparison
boolean isEqual = "Hello".equals("hello"); // Output: false

// String methods
String upperCaseGreeting = greeting.toUpperCase(); // Output: "HELLO, WORLD!"
String lowerCaseGreeting = greeting.toLowerCase(); // Output: "hello, world!"
String substring = greeting.substring(0, 5); // Output: "Hello"


// Here are some commonly used string methods available in Java:
// Check if the string is empty
boolean isEmpty = greeting.isEmpty(); // Output: false

// Trim whitespace from the beginning and end of the string
String trimmedString = greeting.trim(); // Output: "Hello, World!"

// Replace characters in the string
String replacedString = greeting.replace('o', 'a'); // Output: "Hella, Warld!"

// Split the string into an array of substrings
String[] parts = greeting.split(", "); // Output: ["Hello", "World!"]

// Check if the string contains a sequence of characters
boolean containsHello = greeting.contains("Hello"); // Output: true

// Check if the string starts with a specific prefix
boolean startsWithHello = greeting.startsWith("Hello"); // Output: true

// Check if the string ends with a specific suffix
boolean endsWithWorld = greeting.endsWith("World!"); // Output: true

// Convert the string to a character array
char[] charArray = greeting.toCharArray(); // Output: ['H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!']

// Format a string
String formattedString = String.format("My name is %s and I am %d years old.", "John", 25); // Output: "My name is John and I am 25 years old."

// Join multiple strings
String joinedString = String.join(", ", "apple", "banana", "cherry"); // Output: "apple, banana, cherry"

// Convert other data types to string
String intString = String.valueOf(123); // Output: "123"
String booleanString = String.valueOf(true); // Output: "true"
String charString = String.valueOf('A'); // Output: "A"



// StringBuffer:
In Java, `StringBuffer` is a thread-safe, mutable sequence of characters. Unlike `String`, `StringBuffer` can be modified after it is created. Here is an example of how to define and use a `StringBuffer` in Java:

available methods in StringBuffer:
Append | Replace | Insert | Delete | reverse | length | capacity | ensureCapacity | charAt | setCharAt | substring | toString

// Append the specified string to this character sequence
buffer.append("text");

// Insert the specified string at the specified position
buffer.insert(0, "text");

// Replace the characters in a substring of this sequence with characters in the specified String
buffer.replace(0, 4, "text");

// Delete the characters in a substring of this sequence
buffer.delete(0, 4);

// Reverse the sequence of characters
buffer.reverse();

// Get the length of the character sequence
int length = buffer.length();

// Get the current capacity of the buffer
int capacity = buffer.capacity();

// Ensure that the capacity is at least equal to the specified minimum
buffer.ensureCapacity(50);

// Get the character at the specified index
char charAt = buffer.charAt(0);

// Set the character at the specified index
buffer.setCharAt(0, 'H');

// Get a substring of the character sequence
String substring = buffer.substring(0, 5);

// Convert the buffer to a string
String result = buffer.toString();

StringBuffer buffer = new StringBuffer("Hello");

// Append to the buffer
buffer.append(", World!"); // buffer now contains "Hello, World!"

// Insert into the buffer
buffer.insert(5, " Java"); // buffer now contains "Hello Java, World!"

// Replace part of the buffer
buffer.replace(6, 10, "C++"); // buffer now contains "Hello C++, World!"

// Delete part of the buffer
buffer.delete(5, 9); // buffer now contains "Hello, World!"

// Reverse the buffer
buffer.reverse(); // buffer now contains "!dlroW ,olleH"

// Convert StringBuffer to String
String result = buffer.toString(); // result is "!dlroW ,olleH"

// StringBuffer methods
int length = buffer.length(); // Output: 13
int capacity = buffer.capacity(); // Output: 29 (default capacity is 16 + initial string length)
char charAt = buffer.charAt(0); // Output: '!'
buffer.setCharAt(0, 'H'); // buffer now contains "HdlroW ,olleH"



// StringBuilder:
In Java, `StringBuilder` is similar to `StringBuffer` but is not thread-safe. `StringBuilder` is used when you do not need thread safety and want better performance. Here is an example of how to define and use a `StringBuilder` in Java:

// StringBuilder:
StringBuilder builder = new StringBuilder("Hello");

// Append to the builder
builder.append(", World!"); // builder now contains "Hello, World!"

// Insert into the builder
builder.insert(5, " Java"); // builder now contains "Hello Java, World!"

// Replace part of the builder
builder.replace(6, 10, "C++"); // builder now contains "Hello C++, World!"

// Delete part of the builder
builder.delete(5, 9); // builder now contains "Hello, World!"

// Reverse the builder
builder.reverse(); // builder now contains "!dlroW ,olleH"

// Convert StringBuilder to String
String result = builder.toString(); // result is "!dlroW ,olleH"

// StringBuilder methods
int length = builder.length(); // Output: 13
int capacity = builder.capacity(); // Output: 29 (default capacity is 16 + initial string length)
char charAt = builder.charAt(0); // Output: '!'
builder.setCharAt(0, 'H'); // builder now contains "HdlroW ,olleH"



// Difference between String, StringBuffer, and StringBuilder:

// 1. Mutability:
// - String: Immutable. Once a String object is created, it cannot be changed.
// - StringBuffer: Mutable. Can be modified after creation.
// - StringBuilder: Mutable. Can be modified after creation.

// 2. Thread Safety:
// - String: Thread-safe. Safe to use in a multi-threaded environment.
// - StringBuffer: Thread-safe. Methods are synchronized to ensure thread safety.
// - StringBuilder: Not thread-safe. Methods are not synchronized, making it faster but unsafe in multi-threaded environments.

// 3. Performance:
// - String: Slower for concatenation and modifications due to immutability.
// - StringBuffer: Faster than String for modifications due to mutability and thread safety.
// - StringBuilder: Fastest for modifications due to mutability and lack of synchronization overhead.

// 4. Use Case:
// - String: Use when the value should not change or when thread safety is required without frequent modifications.
// - StringBuffer: Use when thread safety is required and frequent modifications are needed.
// - StringBuilder: Use when thread safety is not a concern and frequent modifications are needed.